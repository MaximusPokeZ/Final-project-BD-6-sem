version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network


  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - app-network


  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: rules_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d rules_db" ]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network


  redis:
    image: redis:5.0.3-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network


  mongodb:
    image: mongo:4.0.10
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network


  clickhouse:
    image: clickhouse/clickhouse-server:23.3
    ports:
      - "8123:8123"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - app-network

  clickhouse-init:
    image: clickhouse/clickhouse-server:23.3
    depends_on:
      clickhouse:
        condition: service_healthy
    command: >
      clickhouse-client
        --host clickhouse
        --multiquery
        --queries-file /init/init_clickhouse.sql
    volumes:
      - ./init_clickhouse.sql:/init/init_clickhouse.sql:ro
    networks:
      - app-network




  generator:
    image: ykwais/bd_generator:1.0
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      KAFKA_PRODUCER_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_PRODUCER_TOPIC: "topic_1"
      MESSAGE_UPDATE_INTERVAL_SEC: "5"
      SERVER_PORT: "8087"
    networks:
      - app-network


  sifter:
    image : ykwais/bd_sifter:1.0
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      DB_JDBC_URL: "jdbc:postgresql://postgres:5432/rules_db"
      DB_USER: "admin"
      DB_PASSWORD: "admin"
      DB_DRIVER: "org.postgresql.Driver"

      KAFKA_CONSUMER_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_CONSUMER_GROUP_ID: "group_consumer"
      KAFKA_CONSUMER_AUTO_OFFSET_RESET: "earliest"
      KAFKA_CONSUMER_TOPICS: "topic_1"

      KAFKA_PRODUCER_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_PRODUCER_TOPIC: "topic_2"

      APPLICATION_UPDATE_INTERVAL_SEC: "30"
      SERVER_PORT: "8082"

    networks:
      - app-network




  selection:
    image : ykwais/bd_selection:1.0
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_healthy

    environment:
      DB_JDBC_URL: "jdbc:postgresql://postgres:5432/rules_db"
      DB_USER: "admin"
      DB_PASSWORD: "admin"
      DB_DRIVER: "org.postgresql.Driver"

      KAFKA_CONSUMER_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_CONSUMER_GROUP_ID: "group_consumer"
      KAFKA_CONSUMER_AUTO_OFFSET_RESET: "earliest"
      KAFKA_CONSUMER_TOPICS: "topic_2"

      KAFKA_PRODUCER_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_PRODUCER_TOPIC: "topic_3"

      REDIS_HOST: "redis"
      REDIS_PORT: "6379"

      APPLICATION_UPDATE_INTERVAL_SEC: "30"
      SERVER_PORT: "8083"

    networks:
      - app-network


  padding:
    image: ykwais/bd_padding:1.0
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      mongodb:
        condition: service_healthy
      auth:
        condition: service_started


    environment:
      DB_JDBC_URL: "jdbc:postgresql://postgres:5432/rules_db"
      DB_USER: "admin"
      DB_PASSWORD: "admin"
      DB_DRIVER: "org.postgresql.Driver"

      KAFKA_CONSUMER_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_CONSUMER_GROUP_ID: "group_consumer"
      KAFKA_CONSUMER_AUTO_OFFSET_RESET: "earliest"
      KAFKA_CONSUMER_TOPICS: "topic_3"

      KAFKA_PRODUCER_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_PRODUCER_TOPIC: "topic_4"

      MONGO_CONNECTION_STRING: "mongodb://admin:admin@mongodb:27017"
      MONGO_DATABASE: "enrichment_db"
      MONGO_COLLECTION: "enrichment_rules"

      APPLICATION_ENRICHMENT_ID: "1"
      APPLICATION_UPDATE_INTERVAL_SEC: "30"
      SERVER_PORT: "8085"
    networks:
      - app-network


  analytics:
    image: ykwais/bd_analytic:1.0
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      clickhouse:
        condition: service_healthy
      auth:
        condition: service_started
    environment:
      DB_JDBC_URL: "jdbc:postgresql://postgres:5432/rules_db"
      DB_USER: "admin"
      DB_PASSWORD: "admin"
      DB_DRIVER: "org.postgresql.Driver"

      KAFKA_CONSUMER_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_CONSUMER_GROUP_ID: "group_consumer"
      KAFKA_CONSUMER_AUTO_OFFSET_RESET: "earliest"
      KAFKA_CONSUMER_TOPICS: "topic_4"

      KAFKA_PRODUCER_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_PRODUCER_TOPIC: "topic_5"

      CLICKHOUSE_JDBC_URL: "jdbc:clickhouse://clickhouse:8123/default"
      CLICKHOUSE_USER: "default"
      CLICKHOUSE_PASSWORD: ""
      CLICKHOUSE_DRIVER: "com.clickhouse.jdbc.ClickHouseDriver"

      APPLICATION_SERVICE_ID: "1"
      APPLICATION_UPDATE_INTERVAL_SEC: "30"
      SERVER_PORT: "8089"
    networks:
      - app-network

  management:
    image : ykwais/bd_manager:1.0
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:

      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/rules_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver

      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE: postgresql
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: "true"

      SERVER_PORT: "8081"

      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,info,metrics,prometheus"
      MANAGEMENT_ENDPOINT_PROMETHEUS_ACCESS: "read_only"
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: "always"
      MANAGEMENT_INFO_METRICS_ENABLED: "true"
    networks:
      - app-network

  auth:
    image: ykwais/bd_auth:1.0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      management:
        condition: service_started
      clickhouse:
        condition: service_healthy
    environment:
      DB_USERNAME: admin
      DB_PASSWORD: admin
      DB_DRIVER: jdbc:postgresql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: rules_db

      REDIS_HOST: redis
      REDIS_PORT: 6379

      MANAGEMENT_HTTP_PROTOCOL: http
      MANAGEMENT_HOST: management
      MANAGEMENT_PORT: 8081
      DEDUPLICATION_BASE_PATH: deduplication
      ENRICHMENT_BASE_PATH: enrichment
      FILTER_BASE_PATH: filter
      ANALYTIC_BASE_PATH: analytic

      APPLICATION_PORT: 8084

      SPRING_PROFILES_ACTIVE: prod
      SPRING_LIQUIBASE_ENABLED: "true"

      TOPIC_IN: topic_1
      TOPIC_OUT: topic_5

    ports:
      - "8080:8084"
    networks:
      - app-network


  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - auth
      - management
      - sifter
      - selection
      - padding
      - analytics
      - generator
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    depends_on:
      - prometheus
    networks:
      - app-network

volumes:
  pgdata:
  redis_data:
  mongodb_data:
  grafana_data:
  clickhouse_data:


networks:
  app-network:
    driver: bridge



